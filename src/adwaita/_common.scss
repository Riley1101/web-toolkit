@function gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$height: 30px;

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$asset_suffix: if($variant=='dark', '-dark', '');
$backdrop_transition: 200ms ease-out;
$button_transition: all 200ms $ease-out-quad;
$focus_transition: outline-width 200ms $ease-out-quad, outline-offset 200ms $ease-out-quad;
$button_radius: 5px;
$menu_radius: 5px;
$menu_margin: $menu_radius; //margin around menuitems & sidebar items
$menu_padding: 12px; // inner menuitem padding
// global $menu-margin for outside menuitems // XXX define this
$window_radius: $button_radius + 3;
$popover_radius: $button_radius + 4;

/***************
 * Selections  *
 ***************/

*::selection {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

/***************
 * Scrollbars  *
 ***************/

*::-webkit-scrollbar {
  width: 10px;
}
*::-webkit-scrollbar-track {
  background-color: transparent;
  padding: 0 5px;
}
*::-webkit-scrollbar-thumb {
  background-color: #bbb;
  border-radius: 5px;
  margin: 0 2px;
}
*::-webkit-scrollbar-thumb:hover {
  background-color: #999;
}
*::-webkit-scrollbar-thumb:active {
  background-color: #888;
}

/***************
 * Base States *
 ***************/
.background {
  color: $fg_color;
  background-color: $bg_color;

  .window-inactive & {
    text-shadow: none;
    --icon-shadow: none;
  }
}

/***************
 * Layout      *
 ***************/

.Box {
  &.horizontal {
    display: flex;
    flex-direction: row;
    & > *:not(:last-child) {
      margin-right: 1em;
    }
    &.compact > *:not(:last-child) {
      margin-right: 0;
    }
  }
  &.vertical {
    display: flex;
    flex-direction: column;
    & > *:not(:last-child) {
      margin-bottom: 1em;
    }
    &.compact > *:not(:last-child) {
      margin-bottom: 0;
    }
  }
  &.inline {
    display: inline-flex;
  }
  &.align {
    align-items: center;
  }
  &.justify {
    justify-content: center;
  }
  &.space-around {
    justify-content: space-around;
  }
  &.space-between {
    justify-content: space-between;
  }

  &.fill {
    display: inline-flex;
    width: 100%;
    height: 100%;
  }
  &.fill-width {
    display: inline-flex;
    width: 100%;
  }
  &.fill-height {
    display: inline-flex;
    height: 100%;
  }
}
.Box__fill {
  flex: 1;
}


.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &.selected {
    &:focus, & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

.TextView {
  > textarea {
    @extend %view;

    border-color: $borders_color;
    border-radius: $button_radius;
    border-spacing: 6px;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    @include focus-ring($focus-state: 'focus-within');

    &::selection { @extend %selected_items; }
  }

  &.dnd-active {
    caret-color: $drop_target_color;
  }
}

.IconView {
  @extend .view;

  @include focus-ring();

  &.dnd-active {
    box-shadow: none;
  }

  > dndtarget.dnd-active {
    border-style: solid;
    border-width: 1px;
    border-color: $selected_borders_color;
  }
}

.SelectionArea {
  border: 1px solid darken($selected_bg_color, 10%);
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

.Flowbox {
  > .SelectionArea { @extend .SelectionArea; }

  > .Flowbox__child {
    padding: 3px;
    transition: $focus_transition;

    @include focus-ring();

    &.selected {
      outline-color: $alt_focus_border_color;

      @extend %selected_items;
    }
  }
}

.Grid {
  > .SelectionArea { @extend .SelectionArea; }

  > .Grid__child {
    padding: 3px;
    transition: $focus_transition;

    @include focus-ring();

    &.selected {
      outline-color: $alt_focus_border_color;

      @extend %selected_items;
    }

    .Grid__box { //cells
      border-spacing: 8px; //.Label separation
      margin: 12px;
    }
  }
}

/****************
 * Labels       *
 ****************/

.Label {
  @include focus-ring();

  &.separator {
    @extend .dim-label;
  }

  &.selected { @extend %nobg_selected_items; }

  &::selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &.disabled {
    color: $insensitive_fg_color;

    .Button & { color: inherit; }

    &::selection { @extend %selected_items_disabled; }
  }

  &.error {
   color: $error_color;
   &.disabled { color: transparentize($error_color,0.5); }
  }

  &.title {
    color: mix($fg_color, $bg_color, 50%);
    font-weight: 700;
  }

  &.align-left {
    text-align: left;
  }
  &.align-center {
    text-align: center;
  }
  &.align-right {
    text-align: right;
  }

  &.ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &.fill {
    width: 100%;
    height: 100%;
  }
  &.fill-width {
    width: 100%;
  }
  &.fill-height {
    height: 100%;
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

%osd,
.osd {
  color: $osd_fg_color;
  border: none;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  text-shadow: 0 1px black;
  --icon-shadow: 0 1px black;
}


/****************
 * Icons        *
 ****************/

.normal-icons {
  --icon-size: 16px;
}

.large-icons {
  --icon-size: 32px;
}

.Icon {
  @include flex_center;
  display: inline-flex;

  &:not(.colored) {
    svg * {
      fill: var(--icon-color, #{$fg_color});
    }
  }

  svg {
    transform: scale(0.8);
  }
}

/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to { transform: rotate(1turn); }
}

.Spinner {
  opacity: 1;
  animation: spin 1s linear infinite;
  display: inline-block;
  width:  var(--icon-size, 16px);
  height: var(--icon-size, 16px);

  &.disabled {
    opacity: 0.5;
  }

  &.hidden {
    opacity: 0;
  }
}

/****************
 * Text Entries *
 ****************/

@keyframes move_along_width {
  0% {
    left: var(--input-padding);
  }
  50% {
    left: calc(100% - var(--progress-undeterminate-width) - var(--input-padding, 8px));
  }
  100% {
    left: var(--input-padding);
  }
}

%entry,
.Input {
  --input-padding: 8px;
  --progress-undeterminate-width: 50px;

  %entry_basic, & {
    position: relative;
    display: inline-flex;
    flex-direction: row;
    align-items: center;
    min-height: 28px;
    padding-left:  var(--input-padding);
    padding-right: var(--input-padding);
    border: 1px solid;
    border-radius: $button_radius;
    border-spacing: 6px;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    @include focus-ring($focus-state: 'focus-within');


    > .Input__area {
      position: relative;
      flex: 1;
      height: 100%;
      overflow: hidden;

      > input {
        width: 100%;
        height: 100%;
        border: none;
        background: none;
        &:focus {
          outline: none;
        }
        &::placeholder {
          @extend .dim-label;
          user-select: none;
        }
        &::selection { @extend %selected_items; }
      }
      > .Input__children {
        position: absolute;
        pointer-events: none;
        top:  0px;
        left: 0px;
        width: 100%;
        height: 100%;
        @include flex-center;
        justify-content: flex-start;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      > input:focus + .Input__children {
        opacity: 0.5;
      }
      > input:not(.empty) + .Input__children {
        opacity: 0;
      }
    }

    // icons inside the entry
    .Input__left, .Input__right { @include flex_center; }
    .Input__left { margin-right: 6px; }
    .Input__right { margin-left: 6px; }

    &.flat {
      &:focus-within, .window-inactive &, &:disabled, .window-inactive &:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:focus-within {
      @include entry(focus);
      > .Input__area > input::placeholder {
        opacity: 0; /* We hide placeholders on focus */
      }
    }

    &:disabled,
    &.disabled {
      @include entry(insensitive);
      .Icon {
        opacity: 0.7;
      }
    }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color),
                               (warning, $warning_color) {
      &.#{$e_type} {

        border-color: $e_color;

        @include focus-ring($focus-state: 'focus-within', $fc: transparentize($e_color, 0.5));

        &:focus-within { @include entry(focus, $e_color); }

        input {
          color: mix($e_color, $fg_color, 80%);

          &::selection { background-color: $e_color; }
        }
      }
    }

    *:not(.InputNumber__button) .Icon { // entry icons colors
      --icon-color: #{mix($fg_color, $base_color, 80%)};
      &:hover {
        --icon-color: #{$fg_color};
      }
      &:active {
        --icon-color: #{$selected_bg_color};
      }
    }

    .dnd-active & {
      &:focus-within, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    .osd & {
      @include entry(osd);

      &:focus-within { @include entry(osd-focus); }

      &:disabled { @include entry(osd-insensitive); }
    }
  }

  .Input__progress {
    position: absolute;
    display: inline-block;
    pointer-events: none;
    width: calc(100% - 2 * var(--input-padding, 8px));
    height: calc(100% - 1px);
    top:  0px;
    left: var(--input-padding);

    .Input__progress__bar {
      display: inline-block;
      width: 100%;
      height: 100%;
      border-width: 0 0 2px;
      border-color: $selected_bg_color;
      border-style: solid;
    }

    &.undeterminate {
      height: calc(100% - 1px);
      width: var(--progress-undeterminate-width);
      animation: move_along_width 2.5s infinite;
    }
  }

   // linked entries
   .linked:not(.vertical) > & {
     @include linked;
   }

  // .dnd-active .linked:not(.vertical) + &,
  // .dnd-active .linked:not(.vertical) + button,
  // .dnd-active .linked:not(.vertical) + menubutton > button,
  // .dnd-active .linked:not(.vertical) + .Dropdown > button,
  // .dnd-active .linked:not(.vertical) + colorbutton > button,
  // .dnd-active .linked:not(.vertical) + fontbutton > button,
  // .dnd-active .linked:not(.vertical) + filechooserbutton > button,
  // .dnd-active .linked:not(.vertical) + filechooserbutton > combobox > box > button.combo,
  // .dnd-active .linked:not(.vertical) + appchooserbutton > combobox > box > button.combo,
  // .dnd-active .linked:not(.vertical) + combobox > box > button.combo {
  //   border-left-color: $drop_target_color;
  // }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @include linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($borders_color, $base_color, 30%);
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled { border-top-color: mix($borders_color, $base_color, 30%); }

    + %entry.dnd-active:not(:only-child),
    + entry.dnd-active:not(:only-child) { border-top-color: $drop_target_color; }

    &.dnd-active:not(:only-child) {
      + %entry,
      + entry,
      + .Input,
      + .Button,
      + menubutton > .Button,
      + .Dropdown > .Button,
      + colorbutton > .Button,
      + fontbutton > .Button,
      + filechooserbutton > .Button,
      + filechooserbutton > combobox > box > .Button.combo,
      + appchooserbutton > combobox > box > .Button.combo,
      + combobox > box > .Button.combo { border-top-color: $drop_target_color; }
    }
  }
}

// TODO this?
.InputGroup {
  display: flex;
  flex-direction: row;
}

// TODO validate this
.table .Input {
  &:focus-within {
    &:dir(rtl), &:dir(ltr) { // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus-within { border-color: $selected_bg_color; }
  }
}

/*******************
 * Editable Labels *
 *******************/
// TODO validate this
editablelabel > stack > text {
  @include entry(normal);
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant=='light', $selected_bg_color,
                                   lighten($selected_bg_color, 15%));
@keyframes needs_attention {
  from {
    background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%);
  }
  to {
    background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1));
  }
}

%button,
.Button
{
  @at-root %button_basic, & {

    position: relative;
    display: inline-flex;
    justify-content: center;
    align-items: center;

    min-height: 28px;
    min-width: 16px;
    padding: 4px 9px;
    border: 1px solid;
    border-radius: $button_radius;
    transition: $button_transition;

    user-select: none;
    &, & > .Label {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    @include button(normal);

    @include focus-ring();

    &:not(:disabled):not(.disabled) {
      &.hover,
      &:hover {
        @include button(hover);
        -gtk-icon-filter: brightness(1.2);
      }

      &.active,
      &:active,
      &:checked {
        @include button(active);

        transition-duration: 50ms;
      }
    }

    .window-inactive & {
      &.flat, & {
        @include button(backdrop);

        transition: $backdrop_transition;
        -gtk-icon-filter: none;

        &:active,
        &:checked { @include button(backdrop-active); }

        &:disabled {
          @include button(backdrop-insensitive);

          &:active,
          &:checked { @include button(backdrop-insensitive-active); }
        }
      }
    }

    &:disabled,
    &.disabled {
      @include button(insensitive);

      &.active,
      &:active,
      &:checked { @include button(insensitive-active); }
    }

    @at-root %button_basic_flat,
    &.flat {
      @include button(undecorated);
      // to avoid adjacent buttons borders clashing when transitioning, the transition on the normal state is set
      // to none, while it's added back in the hover state, so the button decoration will fade in on hover, but
      // it won't fade out when the pointer leave the button allocation area. To make the transition more evident
      // in this case the duration is increased.
      transition: none;

      &:not(:disabled):not(.disabled) {
        &.hover,
        &:hover {
          @include button(undecorated-hover);
          transition: $button_transition;
          transition-duration: 500ms;
        }
        &:active,
        &:checked {
          @include button(undecorated-active);
          transition: $button_transition;
        }
      }
      &:backdrop, &:disabled, &:backdrop:disabled { @include button(undecorated); }
    }

    &.image-button {
      min-width: 24px;
      padding-left: 5px;
      padding-right: 5px;
    }

    &.text-button {
      padding-left: 16px;
      padding-right: 16px;
    }

    &.text-button.image-button {
      padding-left: 8px;
      padding-right: 8px;

      .Label {
        padding-left: 8px;
        padding-right: 8px;
      }
    }

    @at-root %button_basic_drop_active,
    &.dnd-active {
      color: $drop_target_color;
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 1px $drop_target_color;
    }
  }

  @at-root %button_selected, & {
    row.selected & {
      @if $variant == 'light' { border-color: $selected_borders_color; }
    }

    @at-root %button_selected_flat, &.flat {
      row.selected & {
        &:not(:active):not(:checked):not(:hover):not(disabled) {
          color: $selected_fg_color;
          border-color: transparent;

          &:backdrop { color: if($variant=='light', $backdrop_base_color, $backdrop_fg_color); }
        }
      }
    }
  }


  // big standalone buttons like in Documents pager
  &.osd {
    min-width: 26px;
    min-height: 32px;

    &.image-button {
      min-width: 30px;
      &:only-child {
        margin: 4px;
        border-radius: 50%; // completely round when it is a single button
        box-shadow: 0 1px 2px transparentize(black, 0.8); // drop shadow for the only child
      };
    }

    color: $osd_fg_color;
    border-radius: 5px;

    @include button(osd);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(osd-hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(osd-active);

      border: none;
      box-shadow: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(osd);

    &:hover { @include button(osd-hover); }

    &:active,
    &:checked { &:backdrop, & { @include button(osd-active); }}

    &:disabled { &:backdrop, & { @include button(osd-insensitive); }}

    &.flat {
      @include button(undecorated);

      box-shadow: none; // FIXME respect no edge on the button mixin
      text-shadow: 0 1px black;
      --icon-shadow: 0 1px black;

      &:hover { @include button(osd-hover); }

      &:disabled {
        @include button(osd-insensitive);
        background-image: none;
        border-color: transparent;
        box-shadow: none;
      }

      &:active,
      &:checked { @include button(osd-active); }
    }
  }

  // Suggested and Destructive Action buttons
  @each $b_type, $b_color in (suggested-action, $selected_bg_color),
                             (destructive-action, $destructive_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);
      @include focus-ring($fc: $alt_focus_border_color);

      &.flat {
        @include button(undecorated);

        color: $b_color; //FIXME: does it work on the dark variant?
      }

      &:not(:disabled):not(.disabled) {
        &.hover,
        &:hover { @include button(hover, $b_color, white); }

        &.active,
        &:active,
        &:checked { @include button(active, $b_color, white); }
      }

      &.flat {
        &:disabled {
          @include button(undecorated);

          color: transparentize($b_color, 0.2);
        }
      }

      &:disabled {
        @include button(insensitive);

        &:active,
        &:checked { @include button(insensitive-active, $b_color, white); }
      }

      .osd & {
        @include button(osd, $b_color);

        &:hover { @include button(osd-hover, $b_color); }

        &:active,
        &:checked { &:backdrop, & { @include button(osd-active, $b_color); }}

        &:disabled { &:backdrop, & { @include button(osd-insensitive, $b_color); }}

      }
    }
  }

  .StackSwitcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a .Label needs just lateral padding while an icon needs vertical
    // padding added too.

    > .Label {
      padding: 0 6px;
      margin: 0 -6px;
    }

    > .Image {
      padding: 3px 6px;
      margin: -3px -6px;
    }

    &.needs-attention {
      > .Label,
      > .Image { @extend %needs_attention; }
    }
  }

  .linked:not(.vertical) > & { @include linked; }

  .linked.vertical > & { @include linked_vertical; }

  &.circular { // force circular button shape
    min-width: 32px;
    min-height: 32px;
    padding: 0;
    border-radius: 9999px;

    .Label { padding: 0; }
  }
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actual dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentize($_dot_color,1 ));
  background-size: 5px 5px, 5px 5px;
  background-repeat: no-repeat;

  @if $variant == 'light' { background-position: right 3px, right 4px; }

  @else { background-position: right 3px, right 2px; }

  &:backdrop { background-size: 6px 6px, 0 0;}

  &:dir(rtl) {
    @if $variant == 'light' { background-position: left 3px, left 4px; }

    @else { background-position: left 3px, left 2px; }
  }
}


// TODO validate this
.linked:not(.vertical) > menubutton,
.linked:not(.vertical) > .Dropdown,
.linked:not(.vertical) > colorbutton,
.linked:not(.vertical) > fontbutton,
.linked:not(.vertical) > filechooserbutton {
  &:dir(ltr) {
    &:not(:first-child) > button { @include linked_not_left; }
    &:not(:last-child) > button { @include linked_not_right; }
  }

  &:dir(rtl) {
    &:not(:first-child) > button { @include linked_not_right; }
    &:not(:last-child) > button { @include linked_not_left; }
  }
}

// TODO validate this
.linked.vertical > menubutton,
.linked.vertical > .Dropdown,
.linked.vertical > colorbutton,
.linked.vertical > fontbutton,
.linked.vertical > filechooserbutton {
  &:not(:first-child) > button { @include linked_not_top; }
  &:not(:last-child) > button { @include linked_not_bottom; }
}

// TODO validate this
/* menu buttons */
.ModelItem,
.ModelButton.flat {
  min-height: 26px;
  padding-left: 5px;
  padding-right: 5px;
}
.ModelButton.flat {
  @include button('undecorated');

  // border-radius: $button_radius;
  border: none;
  border-radius: 0;
  text-align: left;

  &.focus,
  &:focus,
  &.hover,
  &:hover {
    outline: none;
    background-color: $menu_selected_color;
    // @include button(undecorated-hover);
  }

  &.active,
  &:active {
    @include button(undecorated-active);
  }

  &.disabled,
  &:disabled {
    color: $insensitive_fg_color;
  }

  &.selected { @extend %selected_items; }
}

/* oldstyle toolbar buttons */

.Toolbar button {
  margin: 1px;
  @include button('undecorated');

  &:hover { @include button('hover'); }
  &:active { @include button('active'); }
  &:disabled { @include button('insensitive'); }
  &:backdrop { @include button('backdrop'); }
  &:backdrop:disabled { @include button('backdrop-insensitive'); }
}

// TODO validate this
button.color {
  padding: 4px;

  > colorswatch:only-child {
    &, > overlay { border-radius: 0; }

    @if $variant == 'light' {
      box-shadow: 0 1px $shadow_color;

      .osd & { box-shadow: none; }
    }
  }

  @if $variant == 'light' {
    .osd &, & {
      &:disabled,
      &:active,
      &:checked { colorswatch:only-child { box-shadow: none; }}
    }
  }
}

/* list buttons */
/* tone down as per new designs, see issue #1473 */
%list_button,
.list > .Row button.image-button:not(.flat) {
  @include button('undecorated');
  border: 1px solid transparentize($borders_color, .5);
  &:hover { @include button(hover); }
  &:active,
  &:checked { @include button(active); }
}

/*********
 * Links *
 *********/

%link,
link {
  color: $link_color;
  text-decoration: underline;
  cursor: pointer;

  &:not(:disabled):not(.disabled) {
    &:visited {
      color: $link_visited_color;

      *.selected & { color: mix($selected_fg_color, $link_visited_color, 60%); }
    }

    &:hover {
      $_fg: lighten($link_color, 10%);
      color: $_fg;

      *.selected & { color: mix($selected_fg_color, $_fg, 90%); }
    }

    &:active {
      color: $link_color;

      *.selected & { color: mix($selected_fg_color, $link_color, 80%); }
    }
  }

  &:disabled { color: transparentize(desaturate($link_color, 100%), 0.2); }

  @at-root %link_selected,
  &.selected,
  *.selected & { color: mix($selected_fg_color, $link_color, 80%); }
}

link {
  @include focus-ring();
}

button.link {
  @extend %link;

  @include button(undecorated);

  &:not(:disabled):not(.disabled) {
    &,
    &:hover,
    &:active,
    &:checked {
      @include button('undecorated');

      text-shadow: none;
    }
  }

  > .Label {
    text-decoration: underline;
  }
}


/*****************
 * GtkSpinButton *
 *****************/

input[type="number"] {
  -moz-appearance: textfield;
}
input::-webkit-inner-spin-button,
input::-webkit-outer-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

.InputNumber {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;
    width: 110px;
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;

    padding: 0;
    border-spacing: 0;

    %spinbutton_horz_entry {
      min-width: 28px;
      // reset all the other props since the spinbutton node is styled here
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
      padding: 6px;

      .window-inactive &.disabled,
      .window-inactive &:disabled {
        background-color: transparent;
      }
    }

    > .Input__area > input {
      @extend %spinbutton_horz_entry;
    }

    /* :not here just to bump specificity above that of the list button styling */
    > button.InputNumber__button.up:not(.flat),
    > button.InputNumber__button.down:not(.flat) {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 16px;
      height: 100%;
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      color: mix($fg_color, $base_color, 90%);
      background-color: transparent;
      border-width: 0.5px;
      border-style: none none none solid;
      border-color: transparentize($borders_color, 0.7);
      border-radius: 0;
      box-shadow: none;
      transition: $button_transition;

      &:dir(rtl) { border-style: none solid none none; }

      &:not(:disabled) {
        &:focus {
          outline: none;
        }
        &:hover {
          color: $fg_color;
          background-color: darken($bg_color,5%);
        }
        &:active {
          background-color: transparentize(black, 0.9);
          box-shadow: inset 0 2px 3px -1px transparentize(black, 0.8);
        }
      }
      &:disabled {
        color: transparentize($insensitive_fg_color, 0.7);
        background-color: transparent;
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }
      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // OSD horizontal
  // TODO validate this
  .osd &:not(.vertical) {
    > .Input__area > input {
      @extend %spinbutton_horz_entry;
    }

    > button.InputNumber__button.up:not(.flat),
    > button.InputNumber__button.down:not(.flat) {
      @include button(undecorated);

      color: $osd_fg_color;
      border-style: none none none solid;
      border-color: transparentize($osd_borders_color, 0.3);
      border-radius: 0;
      box-shadow: none;
      --icon-shadow: 0 1px black;

      &:dir(rtl) { border-style: none solid none none; }

      &:hover {
        @include button(undecorated);

        color: $osd_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        background-color: darken($osd_bg_color,10%);
        --icon-shadow: 0 1px black;
        box-shadow: none;
      }

      &:disabled {
        @include button(undecorated);

        color: $osd_insensitive_fg_color;
        border-color: transparentize(opacify($osd_borders_color, 1), 0.5);
        --icon-shadow: none;
        box-shadow: none;
      }

      &:dir(ltr):last-child { border-radius: 0 $button_radius $button_radius 0; }

      &:dir(rtl):first-child { border-radius: $button_radius 0 0 $button_radius; }
    }
  }

  // Vertical
  &.vertical {
    // in the vertical configuration, we treat the spinbutton
    // as a box, and tweak the style of the entry in the middle
    // so that it's linked

    // FIXME: this should not be set at all, but otherwise it gets the wrong
    // color
    // &:disabled { color: $insensitive_fg_color; }

    display: inline-flex;
    flex-direction: column;
    min-width: 40px;
    width: 40px;

    &.dnd-active {
      border-color: transparent;
      box-shadow: none;
    }


    > .Input__area > input {
      @extend %entry;

      min-height: 32px;
      min-width: 32px;
      width: 100%;
      padding: 0;
      border-radius: 0;

      text-align: center;

      &::selection { @extend %selected_items; }
      > block-cursor { @include entry(block_cursor); }
    }

    > button {
      min-height: 32px;
      min-width: 32px;
      width: 100%;
      padding: 0;

      &.up { @extend %top_button; }
      &.down { @extend %bottom_button; }
    }

    %top_button {
      border-bottom-style: none;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    %bottom_button {
      border-top-style: none;
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }

  // OSD vertical
  // TODO validate this
  .osd &.vertical > button:first-child {
    @include button(osd);

    &:hover { @include button(osd-hover);}

    &:active { @include button(osd-active); }

    &:disabled { @include button(osd-insensitive); }
  }

  // Misc
  // TODO validate this
  .TreeView &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    > text {
      min-height: 0;
      padding: 1px 2px;
    }
  }

  font-feature-settings: "tnum";
  > input {
    font-feature-settings: "tnum";
  }
}


/**************
 * ComboBoxes *
 **************/
.Dropdown__menu.popover.menu.background > .popover__container { padding: 0; } //allow search entries with no margin

.Dropdown {
  display: flex;
  flex-direction: row;
  min-width: 120px;

  &.Button {
    > .Label {
      flex: 1;
      text-align: left;
    }
    > .Icon {
      flex: 0;
    }
  }
  &.open {
    background-color: $popover_bg;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    border-bottom-color: transparent;

    &.Button.active {
      @include button('hover');
      border-color: $popover_border;
    }
  }

  // TODO dnd behavior
  /* &.dnd-active { // FIXME: untested
   *   box-shadow: none;
   *   button.combo { @extend %button_basic_drop_active; }
   * } */
}

// newstyle
.Dropdown__menu.popover {

  > .popover__container {
    padding-top: 0;
    border-top: none;
    border-top-left-radius: 0;
    border-top-right-radius: 0;
  }

  > .popover__container .Dropdown__item {
    // align menu labels with the button .Label
    padding-left: 9px;
    padding-right: 9px;
    padding: 0 $menu_padding;
  }
  > .popover__container .ModelButton {

    &.selected {
      font-weight: 700;
      outline-color: $alt_focus_border_color;
      color: $text-color;
      background-color: $menu_selected_color;
    }
  }

  .list {
    margin: 8px 0;
    & > .row {
      padding: 8px;
    }
  }

  // drodowns with searchboxes on top
  .dropdown-searchbar {
    padding: 6px;
    border-bottom: 1px solid $borders_color;
  }
}

/************
 * Toolbars *
 ************/
%toolbar {
  padding: 4px;
  border-spacing: 4px;
  background-color: $bg_color;
}

.Toolbar {
  @extend %toolbar;

  &.horizontal {
    display: flex;
    flex-direction: row;
  }
  &.vertical {
    display: flex;
    flex-direction: column;
    width: 38px;
  }

  // on OSD
  .osd & { background-color: transparent; }

  // stand-alone OSD toolbars
  &.osd {
    padding: 13px;
    border: none;
    border-radius: 5px;
    background-color: $osd_bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom { border-radius: 0; } // positional classes for `attached` osd toolbars
  }

  // toolbar separators
  &.horizontal > .separator {
    display: inline-block;
    min-height: 28px;
    margin: 0 3px;
  }
  &.vertical > .separator {
    margin: 3px 1px;
  }
}

/**************
 * GtkInfoBar *
 **************/
.InfoBar {
  display: block;
  overflow: hidden;

  transition: $button_transition;

  // FIXME: height is hardcoded otherwise the transition
  // doesnt work :/ We should find a better way to do this
  height: 45px;
  &.close {
    height: 0;
  }

  > .Box {
    padding: 8px;
    border-spacing: 12px;
  }

  // TODO dark variant
  $_types:
    if($variant == 'light',
      (
        (info,    desaturate(lighten($info_color,    30%), 20%)),
        (success, desaturate(lighten($success_color, 25%), 40%)),
        (warning, desaturate(lighten($warning_color, 35%), 40%)),
        (danger,  desaturate(lighten($danger_color,  40%), 40%)),
      )
      ,
      (
        (info,    desaturate(darken($info_color, 10%), 40%)),
        (success, desaturate(darken($success_color, 10%), 40%)),
        (warning, desaturate(darken($warning_color, 10%), 40%)),
        (danger,  desaturate(darken($danger_color, 10%), 40%)),
      )
  );

  @each $_type, $_color in $_types {
    &.#{$_type} {
      > .Box {
        border-bottom: 1px solid darken($_color, 15%);
        background-color: $_color;
      }

      &.activatable:hover > .Box {
        background-color: lighten($_color, 3%);
      }

      > .Box > .Button {
        @include button('normal', $_color);
        &.hover,
        &:hover {
          @include button('hover', $_color);
        }
        &.active,
        &:active {
          @include button('active', $_color);
        }
      }
    }
  }
}

/****************
 * GtkSearchBar *
 ****************/

%darkbar {
  border-style: solid;
  border-color: $borders_color;
  $_bg: mix($bg_color, $borders_color, 70%);
  background-color: $_bg;

  .window-inactive & {
    border-color: $backdrop_borders_color;
    background-color: $backdrop_dark_fill;
    box-shadow: none;
    transition: $backdrop_transition;
  }
}

// Search bar
// TODO validate this
.SearchBar {
  padding: 6px;
  border-spacing: 6px;
  @extend %toolbar;
  @extend %darkbar;
  border-width: 0 0 1px;
}


/*****************
 * Title buttons *
 *****************/

// TODO validate this
.control-buttons {
  border-spacing: 6px;

  &:not(.empty) {
    &.start:dir(ltr),
    &.end:dir(rtl) {
      margin-right: 7px;
    }

    &.start:dir(rtl),
    &.end:dir(ltr) {
      margin-left: 7px;
    }
  }

  button {
    @extend %button_basic;
    @extend %button_basic_flat;


    border-radius: 9999px;
    padding: 6px;
    margin: 0 2px;
    min-width: 0;
    min-height: 0;
    &:not(:disabled):not(.disabled) {
      &:hover {
        //special case hover colors inside a .HeaderBar
        @include button(hover, $c:darken($headerbar_bg_color,10%));
      }
      &:active,
      &:checked { @include button(undecorated-active,$c:darken($headerbar_bg_color,10%)); }
    }
  }
}


/***************
 * Header bars *
 ***************/
%titlebar,
.HeaderBar {
  padding: 0 6px;
  min-height: 46px;
  border-width: 1px;
  border-style: solid;
  border-color: $alt_borders_color;
  border-top-left-radius: $window_radius;
  border-top-right-radius: $window_radius;

  @include headerbar_fill($headerbar_bg_color);

  .window-inactive & {
    border-color: $backdrop_borders_color;
    background-color: $bg_color;
    background-image: none;
    box-shadow: inset 0 1px $top_hilight;

    transition: $backdrop_transition;
  }

  // FIXME: this is a hack to make the inner box fill the bar
  > .Box {
    min-height: 46px;
  }

  .title {
    padding-left: 12px;
    padding-right: 12px;
    font-weight: bold;
  }
  .title:not(:only-child) {
    margin-bottom: 0.15em;
  }
  .subtitle {
    font-size: smaller;
    padding-left: 12px;
    padding-right: 12px;

    @extend .dim-label;
  }

  .Button:not(:disabled):not(.disabled).active {
    border-color: darken($borders_color, 3%);
    border-top-color: darken($borders_color, 8%);
  }

  // TODO remove this?
  // add vertical margins to common widget on the .HeaderBar to avoid them spanning the whole height
  // entry,
  // spinbutton,
  // separator:not(.sidebar),
  // button,
  // menubutton {
  //   margin-top: 6px;
  //   margin-bottom: 6px;
  // }

  // // Reset margins for buttons inside menubutton
  // menubutton > button {
  //   margin-top: 0px;
  //   margin-bottom: 0px;
  // }

  // switch {
  //   margin-top: 10px;
  //   margin-bottom: 10px;
  // }


  // squared corners when the .Window is maximized, tiled, or fullscreen
  &.titlebar,
  &.no-round-corner,
  .maximized &,
  .fullscreen & {
    .window-inctive &, & {
      border-radius: 0;
    }
  }
}

// TODO validate this
.titlebar:not(.HeaderBar) {
  .Window.csd > & {
    // in csd we assume every titlebar is a .HeaderBar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
    border-color: transparent;
    box-shadow: none;
  }

  .separator { background-color: $borders_color; }  // FIXME: use darker border?

  @extend %titlebar;
}

/************
 * Pathbars *
 ************/

// TODO validate this
pathbar > button {
  &.text-button, &.image-button, & {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.text-button.image-button .Label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    .Label:last-child { padding-right: 8px; }
    .Label:first-child { padding-left: 8px; }
  }

  image {
    padding-left: 4px;
    padding-right: 4px;
  }

  &.slider-button {
    padding-left: 0;
    padding-right: 0;
  }
}


/**************
 * Tables     *
 **************/

$_treeview_borders_color: if($variant=='light',mix($borders_color, $base_color,80%),mix($fg_color, $base_color, 20%));
$_treeview_backdrop_borders_color: if($variant=='light',mix($backdrop_borders_color, $base_color, 80%),mix($backdrop_fg_color, $base_color, 20%));

.table {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;

  border: 1px solid $_treeview_borders_color;
  background-color: $background_low;

  @include focus-ring();

  // TODO validate this
  &.selected {
    &:focus, & {
      border-radius: 0;
      outline-color: $alt_focus_border_color;

      @extend %selected_items;
    }
  }

  // TODO validate this
  &.disabled {
    color: $insensitive_fg_color;

    &.selected {
      color: mix($selected_fg_color, $selected_bg_color, 40%);
      &:backdrop { color: mix($backdrop_selected_fg_color, $selected_bg_color, 30%); }
    }
  }

  .window-inactive & {
    border-left-color: $_treeview_backdrop_borders_color;
    border-top: $_treeview_backdrop_borders_color;
  }

  .table__header {
    flex: 0;
  }
  .table__body {
    flex: 1;
  }
  .table__body > div {
    width: 100%;
    margin: 0;
  }

  .th {
    @extend %column_header_button;

    color: $fg_color_title;
    background-color: $base_color;
    font-weight: bold;
    text-shadow: none;
    box-shadow: none;
    cursor: default;

    &:first-child {
      border-left: none;
    }

    &:hover {
      @extend %column_header_button;

      color: mix($fg_color_title, $fg_color, 50%);
      box-shadow: none;
      transition: none; //I shouldn't need this
    }

    &:active {
      @extend %column_header_button;

      color: $fg_color;
      transition: none; //I shouldn't need this
    }
  }
  .td {
    padding: 4px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    height: 28px;
  }
  .td:not(:last-child) {
    border-right: 1px solid $_treeview_borders_color;
  }

  // TODO validate this
  > .SelectionArea { @extend .SelectionArea; } // to avoid borders being overridden by the previously set props

  // TODO validate this
  &.separator {
    min-height: 2px;
    color: $_treeview_borders_color;
  }

  // TODO validate this
  &.dnd-active {
    box-shadow: none;
  }
  > dndtarget.dnd-active {
    border-style: solid none;
    border-width: 1px;
    border-color: $selected_borders_color;

    &.after { border-top-style: none; }

    &.before { border-bottom-style: none; }
  }

  // TODO validate this
  &.expander {
    // GtkTreeView uses the larger of the expander’s min-width and min-height
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');

    &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

    color: mix($text_color, $base_color, 70%);

    &:hover { color: $text_color; }

    &.selected {
      color: mix($selected_fg_color, $selected_bg_color, 70%);

      &:hover { color: $selected_fg_color; }
    }

    &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
  }

  // TODO validate this
  &.progressbar { // progress bar in treeviews
    @if $variant == light { color: $base_color; }

    background-color: $selected_bg_color;
    background-image: image($selected_bg_color);
    box-shadow: none;

    &.selected {
      &:focus, & {

        @if $variant == 'light' {
          color: $selected_bg_color;

        }

        @else { box-shadow: inset 0 1px transparentize(white, 0.95); }

        background-image: image($base_color);

        &:backdrop {
          @if $variant == 'light' {
            color: $selected_bg_color;
          }
          background-color: $backdrop_base_color;
        }
      }
    }
  }

  // TODO validate this
  &.trough { // progress bar trough in treeviews
    background-color: transparentize($fg_color,0.9);

    &.selected {
      &:focus, & {
        background-color: if($variant == 'light',
                             transparentize($selected_fg_color, 0.7),
                             darken($selected_bg_color, 10%));

      }
    }
  }


  // TODO validate this
  button.dnd,
  .table__header.button.dnd { // for treeview-like derive widgets
    &:active, &.selected, &:hover, & {
      padding: 0 6px;
      color: $base_color;
      background-image: none;
      background-color: $selected_bg_color;
      border-style: none;
      border-radius: 0;
      box-shadow: inset 0 0 0 1px $base_color;
      text-shadow: none;
      transition: none;
    }
  }
}

%column_header_button {
  padding: 0 4px;
  background-image: none;
  border-width: 1px;
  border-style: none none solid solid;
  border-color: $_treeview_borders_color;
  border-radius: 0;
  text-shadow: none;

  &:disabled {
    border-color: $bg_color;
    background-image: none;
  }

  &:last-child { &:backdrop, & { border-right-style: none; }}
}

/***************
 * Popovers   *
 ***************/
// popover
// -> arrow
// -> popover__container
//    -> .Menu
//    -> ...

.popover {
  --arrow-size: 10px;

  position: absolute;
  z-index: 2;
  background-color: transparent;

  &:not(.open) {
    pointer-events: none;
    opacity: 0;
  }

  &.arrow > .popover__container {
    margin-top: var(--arrow-size);
  }

  > .arrow {
    position: absolute;
    z-index: 2;
    width: 0;
    height: 0;
    background-color: transparent;

    &::after,
    &::before {
      content: ' ';
      position: absolute;
      top:  0;
      left: 0;
      border: var(--arrow-size) solid transparent;
    }


    &.top {
      top: calc(-1 * var(--arrow-size) + 1px);
      margin-top: var(--arrow-size);
      margin-left: calc(-1 * var(--arrow-size));
      &::before {
        top: -1px;
        border-top-width: 0;
        border-bottom-color: $popover_border;
      }
      &::after {
        border-top-width: 0;
        border-bottom-color: $popover_bg;
      }
    }
    &.bottom {
      top: calc(-1 * var(--arrow-size) + 1px);
      margin-bottom: var(--arrow-size);
      margin-left: calc(-1 * var(--arrow-size));
      &::before {
        top: 1px;
        border-bottom-width: 0;
        border-top-color: $popover_border;
      }
      &::after {
        border-bottom-width: 0;
        border-top-color: $popover_bg;
      }
    }
    &.left {
      left: calc(-1 * var(--arrow-size) + 1px);
      &::before {
        left: -1px;
        border-left-width: 0;
        border-right-color: $popover_border;
      }
      &::after {
        border-left-width: 0;
        border-right-color: $popover_bg;
      }
    }
    &.right {
      left: calc(-1 * var(--arrow-size) + 1px);
      &::before {
        left: 1px;
        border-right-width: 0;
        border-left-color: $popover_border;
      }
      &::after {
        border-right-width: 0;
        border-left-color: $popover_bg;
      }
    }
  }

  > .popover__container {
    padding: 8px 0;

    background-color: $popover_bg;
    background-clip: padding-box;
    border: 1px solid $popover_border;
    border-radius: $popover_radius;
    box-shadow: 0 1px 3px 2px rgba(black, 0.08);

    // TODO validate this
    > .list,
    > .view,
    > .Toolbar {
      border-style: none;
      background-color: transparent;
    }
  }
}

/**********************
 * Popover Base Menus *
 **********************/

.popover.menu {
  padding: 0;
  > .popover__container {
    display: flex;
    flex-direction: column;
    background-color: $menu_color;
  }
  &.MenuBar__popover > .popover__container {
    border-top-left-radius:  0;
    border-top-right-radius: 0;
    border-top: none;
  }
}

.Menu {
  .separator {
    margin: 6px 0;
  }

  .Box.inline-buttons {
    padding: 0 $menu_padding;

    .Button {
      transition: none;
    }
  }

  .Box.circular-buttons {
    padding: $menu_padding $menu_padding 6px;

    .Button.circular {
      @extend %list_button;

      padding: 11px;
      &:focus {
         background-color: $menu_selected_color;
      }
      &:active {
        @include button('active');
      }
    }
  }

  .Menu__item,
  .Menu__button {
    display: flex;
    flex-direction: row;
    align-items: center;
    border: none;

    min-height: 30px;
    min-width: 40px;
    width: 100%;
    padding: 0 $menu_padding;
    border-radius: 0;
    text-align: left;
  }
  .Menu__button {
    &.selected {
      color: $text-color;
      background-color: $menu_selected_color;
    }
    &.selected:active {
      //@extend %selected_items;
      //color: $selected_fg_color;
      background-color: darken($bg_color,14%); // matching buttons
    }
    &:focus {
      outline: none;
    }
  }
  .Menu__button__text {
    flex: 1;
  }
  .Menu__button__accelerator {
    color: rgba($text_color, 0.55);
    margin-left: $menu_padding;
  }

  check,
  radio {
    @include check('menu', 'transparent', $text_color);

    &:hover { @include check('menu-active', 'transparent', $text_color); }
    &:active { @include check('menu-active', 'transparent', $text_color); }
  }

  //only menu radios have a border
  radio { border-color: $borders_color;
    &:active { border-color: transparentize($borders_color,0.5); }
  }

  arrow.left,
  radio.left,
  check.left {
    margin-left: -2px;
    margin-right: 6px;
  }

  arrow.right,
  radio.right,
  check.right {
    margin-left: 6px;
    margin-right: -2px;
  }


  .title {
    padding: 4px $menu_padding; // this will fall apart with font sizing
    width: 100%;
    text-align: left;
  }

  &.icons {
    .Menu__item, .Menu__button, .title {
      position: relative;
      padding-left: $menu_padding + 20px;
    }

    .Menu__icon {
      position: absolute;
      height: 100%;
      top: 0;
      left: 8px;
      opacity: 0.6;
    }
  }

  .Menu__iconAfter.submenu {
    opacity: 0.3;
  }
}


/***********
 * MenuBar *
 **********/

.MenuBar {
  padding: 0px;
  box-shadow: inset 0 -1px transparentize(black, 0.9);

  > .MenuBar__item {
    @include button('undecorated');
    color: $text_color;

    min-height: 16px;
    padding: 1px 8px;
    border-width: 0;
    border-top: 3px solid transparent;
    border-bottom: 3px solid transparent;
    // line-height: 16px;

    &:hover,
    &.hover,
    &:active,
    &.active {
      color: $selected_bg_color;
      border-bottom: 3px solid $selected_bg_color;
    }

    &.focus,
    &:focus {
      outline: none;
      background-color: $menu_selected_color;
    }


    &.selected { //Seems like it :hover even with keyboard focus
      box-shadow: inset 0 -3px $selected_bg_color;
      color: $link_color;
    }

    &:disabled {
      color: $insensitive_fg_color;
      box-shadow: none;
    }
  }

  > .MenuBar__item popover.menu.background > .popover__container {
    padding: $menu-margin;
  }
  //nested submenus
  > .MenuBar__item popover.menu popover.menu {
    padding: 0 0 4px 0;
  }
  > .MenuBar__item popover.menu.background popover.menu.background > .popover__container {
    margin: 0;
    border-radius: $popover_radius; //including top
  }
}
.MenuBar__popover {
  > .popover__container {
    padding-top: 0;
  }
}


/*************
 * Notebooks *
 *************/
notebook {
  @include focus-ring("> header > tabs > tab:checked", $offset: -2px, $focus-state: 'focus:focus-visible');

  > header {
    padding: 1px;
    border-color: $borders_color;
    border-width: 1px;
    background-color: $dark_fill;

    > tabs { margin: -1px; }

    &.top {
      border-bottom-style: solid;
      > tabs {
        margin-bottom: -2px;
        > tab {
          &:hover { box-shadow: inset 0 -4px $borders_color; }


          &:checked { box-shadow: inset 0 -4px $selected_bg_color; }
        }
      }
    }

    &.bottom {
      border-top-style: solid;
      > tabs {
        margin-top: -2px;
        > tab {
          &:hover { box-shadow: inset 0 4px $borders_color; }

          &:checked { box-shadow: inset 0 4px $selected_bg_color; }
        }
      }
    }

    &.left {
      border-right-style: solid;
      > tabs {
        margin-right: -2px;
        > tab {
          &:hover { box-shadow: inset -4px 0 $borders_color; }

          &:checked { box-shadow: inset -4px 0 $selected_bg_color; }
        }
      }
    }

    &.right {
      border-left-style: solid;
      > tabs {
        margin-left: -2px;
        > tab {
          &:hover { box-shadow: inset 4px 0 $borders_color; }

          &:checked { box-shadow: inset 4px 0 $selected_bg_color; }
        }
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      margin-left: -5px;
      margin-right: -5px;
      padding-left: 4px;
      padding-right: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-start-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic'); }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      margin-top: -5px;
      margin-bottom: -5px;
      padding-top: 4px;
      padding-bottom: 4px;

      &.down { -gtk-icon-source: -gtk-icontheme('pan-up-symbolic'); }

      &.up { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
    }

    > tabs > arrow {
      @extend %button_basic;

      @extend %button_basic_flat;

      min-height: 16px;
      min-width: 16px;
      border-radius: 0;

      &:hover:not(:active):not(:backdrop) {
        background-clip: padding-box;
        background-image: none;
        background-color: transparentize(white, 0.7);
        border-color: transparent;
        box-shadow: none;
      }

      &:disabled { @include button(undecorated); }
    }

    > tabs > tab {
      transition: $focus_transition;
      min-height: 30px;
      min-width: 30px;
      padding: 3px 12px;

      color: $fg_color;
      font-weight: normal;

      border-width: 1px;         // for reorderable tabs
      border-color: transparent; //

      &:hover {
        color: $fg_color;
        background-color: darken($dark_fill,4%);

        &.reorderable-page {
          border-color: transparentize($borders_color, 0.7);
          background-color: transparentize($bg_color, 0.8);
        }
      }

      &:not(:checked) {
        outline-color: transparent;
      }

      &:checked {
        color: $fg_color;
        &.reorderable-page {
          border-color: transparentize($borders_color, 0.5);
          background-color: transparentize($bg_color, 0.5);

          &:hover { background-color: transparentize($bg_color, 0.3); }
        }
      }

      // colors the button like the .Label, overridden otherwise
      button.flat {
        color: gtkalpha(currentColor, 0.3);
        &:hover { color: currentColor; }

        padding: 0;
        margin-top: 4px;
        margin-bottom: 4px;
        // FIXME: generalize .small-button?
        min-width: 20px;
        min-height: 20px;

        &:last-child {
          margin-left: 4px;
          margin-right: -4px;
        }

        &:first-child {
          margin-left: -4px;
          margin-right: 4px;
        }
      }
    }

    &.top,
    &.bottom {
      > tabs {
        padding-left: 4px;
        padding-right: 4px;

        &:not(:only-child) {
          margin-left: 3px;
          margin-right: 3px;

          &:first-child { margin-left: -1px; }
          &:last-child { margin-right: -1px; }
        }

        > tab {
          margin-left: 4px;
          margin-right: 4px;

          &.reorderable-page { border-style: none solid; }
        }
      }
    }

    &.left,
    &.right {
      > tabs {
        padding-top: 4px;
        padding-bottom: 4px;

        &:not(:only-child) {
          margin-top: 3px;
          margin-bottom: 3px;

          &:first-child { margin-top: -1px; }
          &:last-child { margin-bottom: -1px; }
        }

        > tab {
          margin-top: 4px;
          margin-bottom: 4px;

          &.reorderable-page { border-style: solid none; }
        }
      }
    }

    &.top > tabs > tab { padding-bottom: 4px; }
    &.bottom > tabs > tab { padding-top: 4px; }
  }

  > stack:not(:only-child) { // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;
  }
}


/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 40px;

  background-color: $scrollbar_bg_color;
  transition: 300ms $ease-out-quad;

  // scrollbar border
  &.top { border-bottom: 1px solid $borders_color; }
  &.bottom { border-top: 1px solid $borders_color; }
  &.left { border-right: 1px solid $borders_color; }
  &.right { border-left: 1px solid $borders_color; }

  > range > trough > slider {
    min-width: 6px;
    min-height: 6px;
    margin: -1px;
    border: 4px solid transparent;
    border-radius: 8px;
    background-clip: padding-box;
    background-color: $scrollbar_slider_color;

    &:hover { background-color: $scrollbar_slider_hover_color; }

    &:hover:active { background-color: $scrollbar_slider_active_color; }

    &:disabled { background-color: transparent; }
  }

  > range.fine-tune {
    > trough > slider {
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal > trough > slider { border-width: 5px 4px; }
    &.vertical > trough > slider { border-width: 4px 5px; }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      opacity: 0.4;
      background-color: transparent;

      > range > trough > slider {
        margin: 0;
        min-width: 3px;
        min-height: 3px;
        background-color: $fg_color;
        border: 1px solid if($variant == 'light', white, black);
      }

      &.horizontal {
        > range > trough > slider {
          margin: 0 2px;
          min-width: $_slider_min_length;
        }
      }

      &.vertical {
        > range > trough > slider {
          margin: 2px 0;
          min-height: $_slider_min_length;
        }
      }
    }

    &.dragging,
    &.hovering { opacity: 0.8; }
  }

  &.horizontal > range > trough > slider { min-width: $_slider_min_length; }
  &.vertical > range > trough > slider { min-height: $_slider_min_length; }
}

.TreeView ~ scrollbar.vertical {
  border-top: 1px solid $borders_color;
  margin-top: -1px;
}

/**********
 * Switch *
 **********/
switch {
  font-weight: bold;
  font-size: smaller;

  // similar to the .scale
  border: 1px solid $borders_color;
  border-radius: 14px;
  color: $fg_color;
  background-color: $dark_fill;
  text-shadow: 0 1px transparentize(black, 0.9);
  transition: $focus_transition;

  @include focus-ring($offset: 0, $outer: true);

  &:checked {
    color: $selected_fg_color;
    border-color: $switch_borders_color;
    background-color: $switch_bg_color;
    text-shadow: 0 1px transparentize($switch_borders_color, 0.5),
                 0 0 2px transparentize(white, 0.4);
  }

  &:disabled {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    text-shadow: none;
  }

  > slider {
    margin: -1px;
    min-width: 24px;
    min-height: 24px;
    border: 1px solid;
    border-color: $borders_color;
    border-radius: 50%;
    transition: $button_transition;

    @include button(normal, $edge: $shadow_color);
  }

  > image { color: transparent; } /* only show i / o for the accessible theme */

  &:hover > slider {
    @include button(hover, $edge: $shadow_color);
  }

  &:checked > slider { border: 1px solid $switch_borders_color; }

  &:disabled > slider { @include button(insensitive); }


  row.selected & {
    outline-color: $alt_focus_border_color;

    @if $variant == 'light' {
      box-shadow: none;
      border-color: $switch_borders_color;

      > slider { &:checked, & { border-color: $switch_borders_color; } }
    }
  }
}


/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly


//selection-mode
@each $check_state, $check_icon, $check_color, $check_background in
  ('', 'none', 'transparent', $checkradio_bg_color),
  (':hover', 'none', 'transparent', $checkradio_bg_color),
  (':active', 'none', 'transparent', $checkradio_bg_color),
  (':backdrop', 'none', 'transparent', '#{desaturate($checkradio_bg_color, 100%)}'),
  (':checked', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $checkradio_bg_color),
  (':checked:hover', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $checkradio_bg_color),
  (':checked:active', '-gtk-icontheme(\'object-select-symbolic\')', $osd_fg_color, $checkradio_bg_color),
  (':backdrop:checked', '-gtk-icontheme(\'object-select-symbolic\')', '#{transparentize($osd_fg_color, 0.2)}', '#{desaturate($checkradio_bg_color, 100%)}'), {

  .view.content-view.check#{$check_state}:not(list),
  .content-view .tile check#{$check_state}:not(list) {
    margin: 4px;
    min-width: 32px;
    min-height: 32px;
    color: #{$check_color};
    background-color: #{$check_background};
    border-radius: 5px;
    background-image: none;
    transition: 200ms;
    box-shadow: none;
    border-width: 0;
    -gtk-icon-source: #{$check_icon};
    --icon-shadow: none;
  }
}

checkbutton {
  border-spacing: 4px;
  border-radius: $button_radius;
  transition: $focus_transition;

  @include focus-ring();

  &.text-button {
    // this is for a nice focus on check and radios text
    padding: 4px;
  }
}

check,
radio {
  min-height: 14px;
  min-width: 14px;
  border: 1px solid;
  -gtk-icon-source: none;

  & {
    // for unchecked
    $_c: if($variant=='light', white, $bg_color);

    @each $state, $t in ("", "normal"),
                        (":hover", "hover"),
                        (":active", "active"),
                        (":disabled", "insensitive") {
      &#{$state} {
        @include check($t, $_c);
      }
    }
  }

  & {
    // for checked
    @each $t in (':checked'), (':indeterminate') {
      &#{$t} {
        @each $state, $t in ("", "normal"),
                            (":hover", "hover"),
                            (":active", "active"),
                            (":disabled", "insensitive") {
          &#{$state} {
            @include check($t, $checkradio_bg_color, $checkradio_fg_color, $checked: true);
          }
        }
      }
    }
  }

  @if $variant == 'light' {
    // the borders of the light variant versions of checks and radios are too similar in luminosity to the selected background
    // color, hence we need special casing.
    row.selected & { border-color: $checkradio_borders_color; }
  }

  .osd & {
    @include button(osd);

    &:hover { @include button(osd); }
    &:active { @include button(osd-active); }
    &:disabled { @include button(osd-insensitive); }
  }
}

%check,
check {
  border-radius: 3px;
  --icon-size: 14px;

  &:checked { -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/check-symbolic.symbolic.png")),
                                            -gtk-recolor(url("assets/check@2-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/dash-symbolic.symbolic.png")),
                                                  -gtk-recolor(url("assets/dash@2-symbolic.symbolic.png"))); }
}

%radio,
radio {
  border-radius: 100%;
  --icon-size: 14px;

  &:checked { -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/bullet-symbolic.symbolic.png")),
                                            -gtk-recolor(url("assets/bullet@2-symbolic.symbolic.png"))); }

  &:indeterminate { -gtk-icon-source: -gtk-scaled(-gtk-recolor(url("assets/dash-symbolic.symbolic.png")),
                                                  -gtk-recolor(url("assets/dash@2-symbolic.symbolic.png"))); }
}

.TreeView.view check,
.TreeView.view radio {
  &.selected {
    &:focus, & {
      color: $checkradio_fg_color;

      @if $variant == 'light' { border-color: $selected_borders_color; }
    }
  }
}

.TreeView.view radio.selected { &:focus, & { @extend %radio; }} // This is a workaround


/************
 * GtkScale *
 ************/
%scale_trough {
  border: 1px solid $borders_color;
  border-radius: 3px;
  background-color: $dark_fill;

  &:disabled {
   background-color: $insensitive_bg_color;
   border-color: $insensitive_borders_color;
  }

  // ...on selected list rows
  row.selected & {
    &:disabled, & {
      outline-color: $alt_focus_border_color;
      border-color: $selected_borders_color;
    }
  }

  // OSD
  .osd & {
    border-color: $osd_borders_color;
    background-color: transparentize($osd_borders_color, 0.2);

    &:disabled { background-color: $osd_insensitive_bg_color; }
  }
}

%scale_highlight {
  border: 1px solid $selected_borders_color;
  border-radius: 3px;
  background-color: $selected_bg_color;

  &:disabled {
    background-color: transparent;
    border-color: transparent;
  }

  // ...on selected list rows
  row.selected & { &:disabled, & { border-color: $selected_borders_color; }}

  // OSD
  .osd & {
    border-color: $osd_borders_color;

    &:disabled { border-color: transparent; }
  }
}

scale {
  // sizing
  $_marks_length: 6px;
  $_marks_distance: 6px;

  min-height: 10px;
  min-width: 10px;
  padding: 12px;

  @include focus-ring("> trough", $offset: 10px);

  // those are inside the trough node, I need them to show their own border over the trough one, so negative margin
  > trough {
    transition: $focus_transition;

    > fill,
    > highlight { margin: -1px; }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

    > slider {
      min-height: 18px;
      min-width: 18px;
      margin: -9px;
    }
  }

  // click-and-hold the slider to activate
  &.fine-tune {
    &.horizontal {
      padding-top: 9px;
      padding-bottom: 9px;
      min-height: 16px;
    }

    &.vertical {
      padding-left: 9px;
      padding-right: 9px;
      min-width: 16px;
    }

    // to make the trough grow in fine-tune mode
    > trough > slider { margin: -6px; }

    > trough > fill,
    > trough > highlight,
    > trough {
      border-radius: 5px;
    }
  }

  // the backing bit
  > trough {
    @extend %scale_trough;
  }

  // the colored part of the backing bit
  > trough > highlight { @extend %scale_highlight; }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  > trough > fill {
    @extend %scale_trough;

    &:backdrop, & { background-color: $borders_color; }

    &:disabled {
      border-color: transparent;
      background-color: transparent;
    }

    // OSD
    .osd & {
      background-color: mix($osd_fg_color, $osd_borders_color, 25%);

      &:disabled {
       border-color: transparent;
       background-color: transparent;
      }
    }
  }

  > trough > slider {
    @include button(normal-alt, $edge: $shadow_color);

    border: 1px solid darken($alt_borders_color, 3%);
    border-radius: 100%;
    transition: $button_transition;
    transition-property: background, border, box-shadow;

    &:hover { @include button(hover, $edge: $shadow_color); }

    &:active { border-color: $selected_borders_color; }

    &:disabled { @include button(insensitive); }

    // ...on selected list rows
    row.selected & { &:disabled, & { border-color: $selected_borders_color; } }

    // OSD
    .osd & {
      @include button(osd);
      border-color: darken($osd_borders_color, 3%);
      background-color: opacify($osd_bg_color, 1); // solid background needed here

      &:hover {
        @include button(osd-hover);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }

      &:active {
        @include button(osd-active);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }

      &:disabled {
        @include button(osd-insensitive);
        background-color: opacify($osd_bg_color, 1); // solid background needed here
      }
    }
  }

  > value {
    color: gtkalpha(currentColor, 0.55);
    font-feature-settings: "tnum";
  }

  &.horizontal {
    > marks {
      color: gtkalpha(currentColor, 0.55);
      &.top    { margin-bottom: $_marks_distance; }
      &.bottom { margin-top: $_marks_distance; }

      indicator {
        background-color: currentColor;
        min-height: $_marks_length;
        min-width: 1px;
      }
    }

    > value.left  { margin-right: 9px; }
    > value.right { margin-left: 9px; }

    &.fine-tune >marks {
      &.top { margin-top: 3px; }
      &.bottom { margin-bottom: 3px; }

      indicator { min-height: ($_marks_length - 3px); }
    }
  }

  &.vertical {
    > marks {
      color: gtkalpha(currentColor, 0.55);
      &.top    { margin-right: $_marks_distance; }
      &.bottom { margin-left: $_marks_distance; }

      indicator {
        background-color: currentColor;
        min-height: 1px;
        min-width: $_marks_length;
      }
    }

    > value.top    { margin-bottom: 9px; }
    > value.bottom { margin-top: 9px; }

    &.fine-tune >marks {
      &.top { margin-left: 3px; }
      &.bottom { margin-right: 3px; }

      indicator { min-height: ($_marks_length - 3px); }
    }
  }

  // *WARNING* scale with marks madness following

  // FIXME: OSD and selected list rows missing, I don't feel like adding the other 144 assets needed for those...
  $suffix: if($variant == 'light', '', '-dark');

  @each $dir_class, $dir_infix in ('horizontal', 'horz'),
                                  ('vertical', 'vert') {
    @each $marks_infix, $marks_class in ('scale-has-marks-above', 'marks-before:not(.marks-after)'),
                                        ('scale-has-marks-below', 'marks-after:not(.marks-before)') {
      @each $state, $state_infix in ('', ''),
                                    (':hover', '-hover'),
                                    (':active', '-active'),
                                    (':disabled', '-insensitive'),
                                    (':backdrop', '-backdrop'),
                                    (':backdrop:disabled', '-backdrop-insensitive') {
        &.#{$dir_class}.#{$marks_class} {

          > trough > slider {
            &#{$state} {
              // an asymmetric slider asset is used here, so the margins are uneven, the smaller
              // margin is set on the point side.
              margin: -10px;
              $_scale_asset: 'assets/slider-#{$dir_infix}-#{$marks_infix}#{$state_infix}#{$suffix}';
              border-style: none;
              border-radius: 0;

              background-color: transparent;
              background-image: -gtk-scaled(url('#{$_scale_asset}.png'), url('#{$_scale_asset}@2.png'));

              $_scale_slider_bg_pos: bottom;

              @if $dir_class == 'horizontal' {
                min-height: 26px;
                min-width: 22px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-top: -14px;

                  $_scale_slider_bg_pos: top;
                }

                @else { margin-bottom: -14px; }
              }

              @else {
                min-height: 22px;
                min-width: 26px;

                @if $marks_infix == 'scale-has-marks-above' {
                  margin-left: -14px;

                  $_scale_slider_bg_pos: left bottom;
                }

                @else {
                  margin-right: -14px;

                  $_scale_slider_bg_pos: right bottom;
                }
              }

              background-position: $_scale_slider_bg_pos;
              background-repeat: no-repeat;
              box-shadow: none;
            }
          }

          &.fine-tune > trough > slider {
            @if $dir_class == 'horizontal' {
              // bigger negative margins to make the trough grow here as well
              margin: -7px -10px;

              @if $marks_infix == 'scale-has-marks-above' { margin-top: -11px; }

              @else { margin-bottom: -11px; }
            }

            @else {
              margin: -10px -7px;

              @if $marks_infix == 'scale-has-marks-above' { margin-left: -11px; }

              @else { margin-right: -11px; }
            }
          }
        }
      }
    }
  }

  &.color {
    min-height: 0;
    min-width: 0;

    > trough {
      background-image: image($borders_color);
      background-repeat: no-repeat;
    }

    &.horizontal {
      padding: 0 0 15px 0;

      > trough {
        padding-bottom: 4px;
        background-position: 0 -3px;
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }

      > trough > slider {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }
    }

    &.vertical {
      &:dir(ltr) {
        padding: 0 0 0 15px;

        > trough {
          padding-left: 4px;
          background-position: 3px 0;
          border-bottom-right-radius: 0;
          border-top-right-radius: 0;
        }

        > trough > slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-left: -15px;
            margin-right: 6px;
          }
        }
      }

      &:dir(rtl) {
        padding: 0 15px 0 0;

        > trough {
          padding-right: 4px;
          background-position: -3px 0;
          border-bottom-left-radius: 0;
          border-top-left-radius: 0;
        }

        > trough > slider {
          &:hover, &:backdrop, &:disabled, &:backdrop:disabled, & {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal {
        &:dir(ltr), &:dir(rtl) { // specificity bump
          padding: 0 0 12px 0;

          > trough {
            padding-bottom: 7px;
            background-position: 0 -6px;
          }

          > trough > slider {
            margin-bottom: -15px;
            margin-top: 6px;
          }
        }
      }

      &.vertical {
        &:dir(ltr) {
          padding: 0 0 0 12px;

          > trough {
            padding-left: 7px;
            background-position: 6px 0;
          }

          > trough > slider {
            margin-left: -15px;
            margin-right: 6px;
          }
        }

        &:dir(rtl) {
          padding: 0 12px 0 0;

          > trough {
            padding-right: 7px;
            background-position: -6px 0;
          }

          > trough > slider {
            margin-right: -15px;
            margin-left: 6px;
          }
        }
      }
    }
  }
}


/*****************
 * Progress bars *
 *****************/
progressbar {
  // sizing
  &.horizontal {
    > trough {
      min-width: 150px;
      &, > progress { min-height: 2px; }
    }
  }

  &.vertical {
    > trough {
      min-height: 80px;
      &, > progress { min-width: 2px; }
    }
  }

  &.horizontal > trough > progress { margin: 0 -1px; } // the progress node is positioned after the trough border
  &.vertical > trough > progress { margin: -1px 0; }   // this moves it over it.


  // FIXME: insensitive state missing and some other state should be set probably
  font-size: smaller;
  color: transparentize($fg_color, 0.6);
  font-feature-settings: "tnum";

  > trough { @extend %scale_trough; }

  > trough > progress {
    @extend %scale_highlight; /* share most of scales' */
    /* override insensitive that is specific to progress */
    &:disabled {
      background-color: $insensitive_fg_color;
      border-color: $insensitive_fg_color;
    }

    border-radius: 1.5px;

    &.left {
      border-top-left-radius: 2px;
      border-bottom-left-radius: 2px;
    }

    &.right {
      border-top-right-radius: 2px;
      border-bottom-right-radius: 2px;
    }

    &.top {
      border-top-right-radius: 2px;
      border-top-left-radius: 2px;
    }

    &.bottom {
      border-bottom-right-radius: 2px;
      border-bottom-left-radius: 2px;
    }
  }

  &.osd { // progressbar.osd used for epiphany page loading progress
    min-width: 3px;
    min-height: 3px;
    background-color: transparent;

    > trough {
      border-style: none;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;

      > progress {
        border-style: none;
        border-radius: 0;
      }
    }
  }

  > trough.empty > progress { all: unset; } // makes the progress indicator disappear, when the fraction is 0
}

/*************
 * Level Bar *
 *************/

$levelbar_size: 9px;
$levelbar_border_radius: 3px;

levelbar {
  &.horizontal {
    trough > block {
      min-height: $levelbar_size;
      border-radius: $levelbar_border_radius;

      &:dir(rtl) {
        border-radius: 0 $levelbar_border_radius $levelbar_border_radius 0;
      }

      &:dir(ltr) {
        border-radius: $levelbar_border_radius 0 0 $levelbar_border_radius;
      }

      &.empty,&.full {
        border-radius: $levelbar_border_radius;
      }
    }

    // segmented level bar
    &.discrete {
      trough > block {
        min-height: 2px;
        margin: 1px;
        min-width: 24px;
        border-radius:0;
        &:first-child {border-radius: 2px 0 0 2px;}
        &:last-child {
          border-radius: 0 2px 2px 0;
        }
      }
    }
  }

  &.vertical {
    trough > block {
      min-width: $levelbar_size;
      border-radius: $levelbar_border_radius;
    }

    &.discrete > trough > block {
      min-width: $levelbar_size - 7px;
      margin: 1px 0;
      min-height: 32px;
    }
  }

  > trough {
    padding: 0;
  }

  // level bar colours
  > trough > block {
    border: 1px solid;

    &.low {
      border-color: if($variant == 'light', darken($warning_color, 10%), $borders_color);
      background-color: $warning_color;
    }

    &.high,
    &:not(.empty) {
      border-color: if($variant == 'light', darken($selected_bg_color, 10%), $borders_color);
      background-color: $selected_bg_color;
    }

    &.full {
      border-color: if($variant == 'light', darken($success_color, 10%), $borders_color);
      background-color: $success_color;
    }

    &.empty {
      background-color: darken($bg_color, 5%);
      border-color: $borders_color;
    }
  }
}


/**********
 * Frames *
 **********/
.Frame {
  border: 1px solid $borders_color;
  // border-radius: $window_radius;

  &.inline {
    display: inline-block;
    width: min-content;
  }

  > .Label {
    margin: 4px;
  }
}

actionbar > revealer > box {
  padding: 6px;
  border-spacing: 6px;
  border-top: 1px solid $borders_color;
}

scrolledwindow {
  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  > overshoot {
    &.top {
      @include overshoot(top);
    }

    &.bottom {
      @include overshoot(bottom);
    }

    &.left {
      @include overshoot(left);
    }

    &.right {
      @include overshoot(right);
    }
  }

  > junction { // the small square between two scrollbars
    // Only color the top-left (or top right in RTL) pixel, to visually connect
    // the borders of the two scrollbars.

    background: $borders_color,
                linear-gradient(to bottom, transparent 1px, $scrollbar_bg_color 1px),
                linear-gradient(to right, transparent 1px, $scrollbar_bg_color 1px);

    &:dir(rtl) {
      background: $borders_color,
                  linear-gradient(to bottom, transparent 1px, $scrollbar_bg_color 1px),
                  linear-gradient(to left, transparent 1px, $scrollbar_bg_color 1px);
    }
  }
}

//vbox and hbox separators
.separator {
  // background-color: lighten($borders_color, 5%);
  border-bottom: 1px solid lighten($borders_color, 5%);
  border-right: 1px solid lighten($borders_color, 5%);
  min-width: 1px;
  min-height: 1px;
}


/*********
 * Lists *
 *********/
listview,
list {
  color: $text_color;
  background-color: $base_color;
  border-color: $borders_color;

  &:backdrop {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;
    border-color: $backdrop_borders_color;
  }

  > row { padding: 2px; }
  > row.expander { padding: 0px; }
  > row.expander .row-header { padding: 2px; }

  &.horizontal row.separator,
  &.separators.horizontal > row:not(.separator) {
    border-left: 1px solid $_treeview_borders_color;
  }
  &:not(.horizontal) row.separator,
  &.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: 1px solid $_treeview_borders_color;
  }
}

row {
  @include focus-ring();

  &.activatable {
    &.has-open-popup, // this is for indicathing which row generated a popover see https://bugzilla.gnome.org/show_bug.cgi?id=754411

    &:hover { background-color: if(variant == light, transparentize($fg_color, 0.9), transparentize($fg_color, 0.95)); }

    &:active { box-shadow: inset 0 2px 2px -2px transparentize(black, 0.8); }

    &.selected {
      &:active { box-shadow: inset 0 2px 3px -1px transparentize(black, 0.5); }

      &.has-open-popup,
      &:hover { background-color: mix($fg_color, $selected_bg_color, 10%); }
    }
  }

  &.selected {
    outline-color: $alt_focus_border_color;

    @extend %selected_items;
  }
}

columnview {
  // move padding to child cells
  > listview > row {
    padding: 0;

    // align horizontal sizing with header buttons
    > cell {
      padding: 8px 6px;

      &:not(:first-child) {
        border-left: 1px solid transparent;
      }
    }
  }

  // make column separators visible when :show-column-separators is true
  &.column-separators > listview > row > cell {
    border-left-color: $_treeview_borders_color;
  }

  // shrink vertically for .data-table
  &.data-table > listview > row > cell {
    padding-top: 2px;
    padding-bottom: 2px;
  }
}

treeexpander {
  border-spacing: 4px;
}

/********************************************************
 * Data Tables                                          *
 * treeview like tables with individual focusable cells *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/2929     *
 ********************************************************/

columnview row:not(.selected) cell editablelabel:not(.editing):focus-within {
  outline: 2px solid $focus_border_color;
}

columnview row:not(.selected) cell editablelabel.editing:focus-within {
  outline: 2px solid $selected_bg_color;
}

columnview row:not(.selected) cell editablelabel.editing text selection {
  color: $selected_fg_color;
  background-color: $selected_bg_color;
}

/*******************************************************
 * Rich Lists                                          *
 * Large list usually containing lots of widgets       *
 * https://gitlab.gnome.org/GNOME/gtk/-/issues/3073    *
 *******************************************************/


.rich-list { /* rich lists usually containing other widgets than just labels/text */
  & > row {
    padding: 8px 12px;
    min-height: 32px; /* should be tall even when only containing a .Label */

    & > box {
      border-spacing: 12px;
    }
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification {
  @extend %osd;

  padding: 10px;
  border-spacing: 10px;
  border-radius: 0 0 5px 5px;
  background-color: $osd_bg_color;
  background-image: linear-gradient(to bottom, transparentize(black, 0.8),
                                               transparent 2px);
  background-clip: padding-box;

  button { @extend %osd_button; }

  border { border: none; }
}


/*************
 * Expanders *
 *************/
expander {
  min-width: 16px;
  min-height: 16px;
  -gtk-icon-source: -gtk-icontheme('pan-end-symbolic');
  &:dir(rtl) { -gtk-icon-source: -gtk-icontheme('pan-end-symbolic-rtl'); }

  &:disabled { color: $insensitive_fg_color; }

  &:checked { -gtk-icon-source: -gtk-icontheme('pan-down-symbolic'); }
}

expander-widget {
  @include focus-ring("> box > title");

  > box > title {
    transition: $focus_transition;
    border-radius: $button_radius;

    &:hover > expander {
      color: lighten($fg_color,30%); //only lightens the icon
    }
  }
}

.navigation-sidebar,
placessidebar,
.StackSwitcher,
expander-widget {
  &:not(decoration):not(.Window).dnd-active:focus,
  &:not(decoration):not(.Window).dnd-active {
    box-shadow: none;
  }
}


/************
 * Calendar *
 ***********/
calendar {
  color: $text_color;
  border: 1px solid $borders_color;

  > header {
    border-bottom: 1px solid $borders_color;

    > button {
      border: none;
      box-shadow: none;
      background: none;
      border-radius: 0;
    }
    > button:backdrop {
      background: none;
    }
  }

  > grid {
    > .Label.day-name {
    }

    > .Label.week-number {
    }

    > .Label.today {
      box-shadow: inset 0px -2px $borders_color;

      &.selected {
        box-shadow: none;
      }
    }

    > .Label:focus {
      outline-color: $focus_border_color;
      outline-offset: -2px;
      outline-width: 2px;
      outline-style: solid;
    }

    > .Label.day-number {
      padding: 4px;

      &.selected{
        @extend %selected_items;
        border-radius: 3px;
      }
    }

    > .Label.day-number.other-month {
      color: gtkalpha(currentColor, 0.3);
    }
  }

}


/***********
 * Dialogs *
 ***********/
.Window.dialog.message { // Message Dialog styling
  .titlebar {
    min-height: 20px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
  }

  box.dialog-vbox.vertical {
    border-spacing: 10px;
  }

  & .Label.title {
    font-weight: 800;
    font-size: 15pt;
  }

  &.csd { // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: $window_radius+1;
      border-bottom-right-radius: $window_radius+1;
    }

    .dialog-action-area button {
      padding: 10px 14px; // labels are not vertically centered on message dialog, this is a workaround
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;

      &:first-child{
        border-left-style: none;
        border-bottom-left-radius: 7px;
      }

      &:last-child {
        border-bottom-right-radius: 7px;
      }
    }
  }
}

.Window.assistant {
  .sidebar {
    padding: $menu-margin;
    border-top: 1px solid $borders_color;
  }

  &.csd .sidebar { border-top-style: none; }

  .sidebar > .Label { padding: 6px 12px; }

  .sidebar > .Label.highlight {
    background-color: $menu_selected_color;
    border-radius: $menu-margin;
  }
}


filechooser {
  .dialog-action-box {
    border-top: 1px solid $borders_color;
  }

  #pathbarbox { border-bottom: 1px solid $bg_color; }
}


filechooserbutton>button>box {
  border-spacing: 6px;
}
filechooserbutton.dnd-active {
  box-shadow: none;
  border-color: transparent;
}


/***********
 * Sidebar *
 ***********/
.sidebar {
  background-color: mix($bg_color, $base_color, 50%);

  &:not(separator) {
    @at-root %sidebar_left,
    &:dir(ltr),
    &.left,
    &.left:dir(rtl) {
      border-right: 1px solid $borders_color;
      border-left-style: none;
    }

    @at-root %sidebar_right,
    &:dir(rtl),
    &.right {
      border-left: 1px solid $borders_color;
      border-right-style: none;
    }
  }

  listview.view,
  list { background-color: transparent; }

  paned & { &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & { border-style: none; }}
}

stacksidebar {
  //not a regular list
  list.separators:not(.horizontal) > row:not(.separator) {
    border-bottom: none;
  }
  row {
    padding: 10px 4px;

    > .Label {
      padding-left: 6px;
      padding-right: 6px;
    }

    &.needs-attention > .Label {
      @extend %needs_attention;
       background-size: 6px 6px, 0 0;
    }
    &.selected {
      background-color: $menu_selected_color;
      border-radius: $menu_radius;
      color: $fg_color;
    }
    &.selected:hover:dir(ltr), &.selected:hover:dir(rtl) {
      background-color: darken($menu_selected_color,5%);
    }
    &:focus:focus-visible {
      outline-width: 0;
      background-color: $selected_bg_color;
      color: $selected_fg_color;
    }
    &.activatable:active, &.activatable.selected:active {
      box-shadow: none; // #3413
    }
  }
}

separator.sidebar {
  background-color: $borders_color;
}


/**********************
 * Navigation Sidebar *
 **********************/

.navigation-sidebar {
  padding: $menu-margin 0; //only vertical padding. horizontal row size would clip

  > separator {
    margin: $menu-margin;
  }

  > row {
    min-height: 36px;
    padding: 0 8px;
    border-radius: $menu-margin;
    margin: 0 $menu-margin 2px;

    &:hover,
    &:focus-visible:focus-within {
      background-color: darken($menu_selected_color, 5%);
    }

    &.selected {
      background-color: $menu_selected_color;
      color: inherit;

      &:hover {
        background-color: darken($menu_selected_color,5%);
      }

      &:focus-visible:focus-within {
        outline-width: 0;
        color: $selected_fg_color;
        background-color: $selected_bg_color;
        &:hover { background-color: darken($selected_bg_color,10%); }
      }
    }

    &:disabled { color: $insensitive_fg_color; }
  }
}


/****************
 * File chooser *
 ****************/

$_placesidebar_icons_opacity: 0.7;

row image.sidebar-icon { opacity: $_placesidebar_icons_opacity; } // dim the sidebar icons
                                                                  // see bug #786613 for details
                                                                  // on this oddity

/* this should be more generic, only using .navigation-sidebar
   https://gitlab.gnome.org/GNOME/gtk/-/issues/2929
*/

placessidebar {
  .navigation-sidebar > row {
    // Needs overriding of the `.navigation-sidebar > row` padding
    padding: 0;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer { padding: 0 14px; }

    image.sidebar-icon {
      &:dir(ltr) { padding-right: 8px; }
      &:dir(rtl) { padding-left: 8px; }
    }

    .Label.sidebar-label {
      &:dir(ltr) { padding-right: 2px; }
      &:dir(rtl) { padding-left: 2px; }
    }

    @at-root button.sidebar-button {
      @extend %button_basic_flat;

      @extend %button_selected_flat;
      min-height: 26px;
      min-width: 26px;
      margin-top: 3px;
      margin-bottom: 3px;
      padding: 0;
      border-radius: 100%;
    }

    // in the sidebar case it makes no sense to click the selected row
    &.selected:active { box-shadow: none; }

    &.sidebar-placeholder-row {
      padding: 0 8px;
      min-height: 2px;
      background-image: image($drop_target_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row { color: $selected_bg_color; }

    &.dnd-active:not(:disabled) {
      color: $drop_target_color;
      box-shadow: inset 0 1px $drop_target_color,
                  inset 0 -1px $drop_target_color;

      &.selected {
        color: $selected_fg_color;
        background-color: $drop_target_color;
      }
    }
  }
}

placesview {
  .server-list-button > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(0turn);
  }

  .server-list-button:checked > image {
    transition: 200ms $ease-out-quad;
    -gtk-icon-transform: rotate(-0.5turn);
  }

  row.activatable:hover {  }

  > actionbar > revealer > box  > box{
    border-spacing: 6px;
  }
}


/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none; // defeats the ugly default handle decoration
    border-style: none; // just to be sure
    background-color: transparent;
    // workaround, using background instead of a border since the border will get rendered twice (?)
    background-image: image($borders_color);
    background-size: 1px 1px;

    &.selected { background-image: image($selected_bg_color); } // FIXME is this needed?

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: $bg_color;
      background-image: image($borders_color), image($borders_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }
    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}


/**************
 * GtkVideo *
 **************/

video {
  & image.osd {
    min-width: 64px;
    min-height: 64px;
    border-radius: 32px;
  }
  background: black;
}

/************
 * Tooltips *
 ************/
tooltip {
  &.background {
    // background-color needs to be set this way otherwise it gets drawn twice
    // see https://bugzilla.gnome.org/show_bug.cgi?id=736155 for details.
    background-color: transparentize(black, 0.2);
    background-clip: padding-box;
    border: 1px solid $tooltip_borders_color; // this subtle border is meant to
                                              // not make the tooltip melt with
                                              // very dark backgrounds
    color: white;
  }

  padding: 6px 10px;
  border-radius: $window_radius;
  box-shadow: none; // otherwise it gets inherited by windowframe.csd

  > box {
    border-spacing: 6px;
  }
}


/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  transition: $focus_transition;

  @include focus-ring($width: 4px, $offset: -2px);

  &.dnd-active, & { border-style: none; } // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: 5px;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    > overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark {
    > overlay {
      color: white;
    }

    &.activatable:hover > overlay {
      border-color: if($variant == 'light', transparentize(black, 0.2), $borders_color);
    }
  }

  &.light {
    > overlay {
      color: black;
    }

    &.activatable:hover > overlay {
      border-color: if($variant == 'light', transparentize(black, 0.5), $borders_color);
    }
  }

  &.dnd-active {
    box-shadow: none;

    &.light > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', darken($drop_target_color, 7%), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }

    &.dark > overlay {
      border-color: $drop_target_color;
      box-shadow: inset 0 0 0 2px if($variant == 'light', transparentize(black, 0.7), $borders_color),
                  inset 0 0 0 1px $drop_target_color;
    }
  }

  > overlay {
    border: 1px solid if($variant == 'light', transparentize(black, 0.7), $borders_color);
  }

  &.activatable:hover > overlay {
    box-shadow: inset 0 1px transparentize(white, 0.6),
                inset 0 -1px transparentize(black, 0.8);
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius 0 0 $_colorswatch_radius;

    &:only-child { border-radius: $_colorswatch_radius; }

    > overlay {
      @include button(normal);
    }

    &.activatable:hover > overlay {
      @include button(hover);
    }
  }

  &:disabled {
    opacity: 0.5;

    > overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row.selected & { box-shadow: 0 0 0 2px $selected_fg_color; }

  &#editor-color-sample {
    border-radius: 4px;

    > overlay { border-radius: 4.5px; }
  }
}

plane {
  transition: $focus_transition;

  @include focus-ring($offset: 2px, $outer: true);
}

// colorscale popup
colorchooser .popover.osd { border-radius: 5px; }

/********
 * Misc *
 ********/
.content-view {
  background-color: darken($bg_color,7%);

  &:hover { -gtk-icon-filter: brightness(1.2); }

  .tile {
    margin: 2px;
    background-color: if($variant=='light', transparent, black);
    border-radius: 0;
    padding: 0;

    &:active, &.selected { background-color: if($variant=='light', transparent, $selected_bg_color); }
    &:disabled { background-color: if($variant=='light', transparent, $insensitive_bg_color); }
}

  > .SelectionArea { @extend .SelectionArea; }

}

.scale-popup {
  .osd & { @extend %osd; }

  .osd & button.flat {  //FIXME: quick hack, redo properly
    border-style: none;
    border-radius: 5px;
  }

  button { // +/- buttons on GtkVolumeButton popup
    &:hover {
      @include button('undecorated');
      background-color: transparentize($fg_color,0.9);
      border-radius: 5px;
    }
  }
}


/**********************
 * .Window Decorations *
 *********************/
.Window {
  // lamefun trick to get rounded borders regardless of CSD use
  border-width: 0px;

  // this needs to be transparent
  // see bug #722563
  $_wm_border: if($variant=='light', transparentize(black, 0.77), transparentize($borders_color, 0.1));
  $_wm_border_backdrop: if($variant=='light', transparentize(black, 0.82), transparentize($borders_color, 0.1));

  &.csd {
    box-shadow: 0 3px 9px 1px transparentize(black, 0.5),
                0 0 0 1px $_wm_border; //doing borders with box-shadow
    margin: 0px;
    border-radius: $window_radius $window_radius 0 0;
    &:backdrop {
      // the transparent shadow here is to enforce that the shadow extents don't
      // change when we go to backdrop, to prevent jumping windows.
      // The biggest shadow should be in the same order then in the active state
      // or the jumping will happen during the transition.
      box-shadow: 0 3px 9px 1px transparent,
                  0 2px 6px 2px transparentize(black, 0.8),
                  0 0 0 1px $_wm_border_backdrop;
      transition: $backdrop_transition;
    }

    &.popup {
      border-radius: $menu_radius;
      box-shadow: 0 1px 2px transparentize(black, 0.8),
                  0 0 0 1px transparentize($_wm_border, 0.1);
    }

    &.dialog.message {
      border-radius: $window_radius;
      box-shadow: 0 1px 2px transparentize(black, 0.8),
                  0 0 0 1px transparentize($_wm_border, 0.1);
    }

    &.solid-csd {
      margin: 0;
      padding: 0;
      border: solid 1px $borders_color;
      border-radius: 0;
      box-shadow: inset 0 0 0 3px $headerbar_bg_color, inset 0 1px $top_hilight;

      &:backdrop { box-shadow: inset 0 0 0 3px $backdrop_bg_color, inset 0 1px $top_hilight; }
    }
  }

  &.maximized,
  &.fullscreen,
  &.tiled,
  &.tiled-top,
  &.tiled-left,
  &.tiled-right,
  &.tiled-bottom { border-radius: 0; }

  &.popup { box-shadow: none; }

  // server-side decorations as used by mutter
  &.ssd { box-shadow: 0 0 0 1px $_wm_border; } //just doing borders, wm draws actual shadows

}

tooltip.csd {
  border-radius: 5px;
  box-shadow: none;
}

// catch all extend :)

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items, & {
    color: $selected_fg_color;

    @at-root %selected_items_disabled,
    &:disabled { color: mix($selected_fg_color, $selected_bg_color, 50%); }

  }
}

.monospace { font-family: monospace; }


/**********************
 * Touch Copy & Paste *
 *********************/
//touch selection handlebars for the Popover.osd above
cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;
  min-width: 20px;
  min-height: 24px;
  padding-left: 20px;
  padding-right: 20px;
  padding-top: 24px;
  padding-bottom: 24px;

  @each $s,$as in ('',''),
                  (':hover','-hover'),
                  (':active','-active') { //no need for insensitive and backdrop
    &.top#{$s}:dir(ltr), &.bottom#{$s}:dir(rtl) {
      $_url: 'assets/text-select-start#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }

    &.bottom#{$s}:dir(ltr), &.top#{$s}:dir(rtl) {
      $_url: 'assets/text-select-end#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }

    &.insertion-cursor#{$s}:dir(ltr), &.insertion-cursor#{$s}:dir(rtl) {
      $_url: 'assets/slider-horz-scale-has-marks-above#{$as}#{$asset_suffix}';
      -gtk-icon-source: -gtk-scaled(url('#{$_url}.png'),
                                    url('#{$_url}@2.png'));
    }
  }
}

shortcuts-section {
  margin: 20px;
}

.shortcuts-search-results {
  margin: 20px;
  border-spacing: 24px;
}

// shortcut .Window keys
shortcut {
  border-spacing: 6px;
}

shortcut > .keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;

  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: if($variant == 'light', mix($borders_color, $bg_color, 50%), $borders_color);
  border-radius: 5px;
  box-shadow: if($variant == 'light', inset 0 -3px mix($base_color, $bg_color, 20%), inset 0 -3px mix($borders_color, $base_color, 60%));
  font-size: smaller;

}

:not(decoration):not(.Window).dnd-active:focus,
:not(decoration):not(.Window).dnd-active { // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $drop_target_color;
  box-shadow: inset 0 0 0 1px $drop_target_color;
  caret-color: $drop_target_color;
}

.StackSwitcher > button.text-button { min-width: 100px; } // FIXME aggregate with buttons

.StackSwitcher.circular {
  border-spacing: 12px;

  // FIXME aggregate with buttons
  > button.circular,
  > button.text-button.circular {
    min-width: 32px;
    min-height: 32px;
    padding: 0;
  }
}
/*************
 * App Icons *
 *************/
/* Outline for low res icons */
.lowres-icon {
    --icon-shadow: 0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/* Drapshadow for large icons */
.icon-dropshadow {
  --icon-shadow: 0 1px 12px rgba(0,0,0,0.05),
      0 -1px rgba(0,0,0,0.05),
      1px 0 rgba(0,0,0,0.1),
      0 1px rgba(0,0,0,0.3),
      -1px 0 rgba(0,0,0,0.1);
}

/*********
 * Emoji *
 ********/

popover.emoji-picker > .popover__container {
  padding: 0;
}

.emoji-searchbar {
  padding: 6px;
  border-spacing: 6px;
  border-bottom: 1px solid $borders_color;
}

.emoji-toolbar {
  padding: 6px;
  border-spacing: 6px;
  border-top: 1px solid $borders_color;
}

button.emoji-section {
  border-color: transparent;
  border-width: 3px;
  border-style: none none solid;
  border-radius: 0;

  padding: 3px 0 0;
  min-width: 32px;
  min-height: 28px;

  /* reset props inherited from the button style */
  background: none;
  box-shadow: none;
  text-shadow: none;

  &:hover { border-color: if($variant == 'light', $borders_color, transparentize($fg_color, .9)); }
  &:checked { border-color: $selected_bg_color; }
}

popover.emoji-picker emoji {
  font-size: x-large;
  padding: 6px;
  border-radius: 6px;

  &:focus,
  &:hover {
    background: $selected_bg_color;
  }
}

emoji-completion-row > box {
  border-spacing: 10px;
  padding: 2px 10px;
}

emoji-completion-row:focus,
emoji-completion-row:hover {
  background-color: $selected_bg_color;
  color: $selected_fg_color;
}

emoji-completion-row emoji:focus,
emoji-completion-row emoji:hover {
  background-color: $menu_selected_color;
}

popover.entry-completion > .popover__container {
  padding: 0;
}

statusbar {
  padding: 6px 10px 6px 10px;
}
